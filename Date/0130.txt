## 절차 지향 프로그래밍

- 프로그램 전체가 유기적인 흐름으로 연결
- 기능 중심의 프로그램
- 순서가 정해져 있으므로 실행이 빠름

- 하드웨어의 발전에 따라 소프트웨어도 점점 커지고 복잡한 설계가 요구됨
- 하드웨어의 발전 속도를 소프트웨어의 발전 속도가 따라가지 못함 (소프트웨어 위기(Software Crisis)
- 생산성이 떨어짐

## 객체 지향 프로그래밍 (Object-Oriented Programming, OOP)

- 프로그램을 여러 개의 독립된 객체들과 그 객체 간의 상호작용으로 파악하는 프로그래밍 방법

### 장점

- 객체는 잘 만들어놓으면 계속해서 재사용이 가능
- 객체는 그 자체로 데이터와 행동이 정의됨(독립적) == 개발자가 내부 구조를 몰라도 그냥 가져다 다른 객체와 조립하면서 개발이 가능
- 객체 단위로 모듈화시켜 개발할 수 있어 많은 인원이 참여하는 대규모 소프트웨어 개발 가능
- 개발 용이성, 유지 보수 편의성, 신뢰성을 바탕으로 생산성이 대폭 증가

### 단점

- 설계 시 많은 노력과 시간이 필요함
- 실행 속도가 상대적으로 느림 (절차 지향 프로그래밍이 컴퓨터의 처리구조와 비슷해서 실행 속도가 빠름)

### Class

- 클래스로 만든 객체를 인스턴스라고도 함

### Instance

### OOP 문법

